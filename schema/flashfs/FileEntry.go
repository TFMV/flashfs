// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flashfs

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FileEntryT struct {
	Path string `json:"path"`
	Size int64 `json:"size"`
	Mtime int64 `json:"mtime"`
	IsDir bool `json:"isDir"`
	Permissions uint32 `json:"permissions"`
	Hash []byte `json:"hash"`
}

func (t *FileEntryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	pathOffset := flatbuffers.UOffsetT(0)
	if t.Path != "" {
		pathOffset = builder.CreateString(t.Path)
	}
	hashOffset := flatbuffers.UOffsetT(0)
	if t.Hash != nil {
		hashOffset = builder.CreateByteString(t.Hash)
	}
	FileEntryStart(builder)
	FileEntryAddPath(builder, pathOffset)
	FileEntryAddSize(builder, t.Size)
	FileEntryAddMtime(builder, t.Mtime)
	FileEntryAddIsDir(builder, t.IsDir)
	FileEntryAddPermissions(builder, t.Permissions)
	FileEntryAddHash(builder, hashOffset)
	return FileEntryEnd(builder)
}

func (rcv *FileEntry) UnPackTo(t *FileEntryT) {
	t.Path = string(rcv.Path())
	t.Size = rcv.Size()
	t.Mtime = rcv.Mtime()
	t.IsDir = rcv.IsDir()
	t.Permissions = rcv.Permissions()
	t.Hash = rcv.HashBytes()
}

func (rcv *FileEntry) UnPack() *FileEntryT {
	if rcv == nil {
		return nil
	}
	t := &FileEntryT{}
	rcv.UnPackTo(t)
	return t
}

type FileEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsFileEntry(buf []byte, offset flatbuffers.UOffsetT) *FileEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FileEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishFileEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsFileEntry(buf []byte, offset flatbuffers.UOffsetT) *FileEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FileEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedFileEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *FileEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FileEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FileEntry) Path() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileEntry) Size() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *FileEntry) Mtime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutateMtime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *FileEntry) IsDir() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *FileEntry) MutateIsDir(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *FileEntry) Permissions() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FileEntry) MutatePermissions(n uint32) bool {
	return rcv._tab.MutateUint32Slot(12, n)
}

func (rcv *FileEntry) Hash(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *FileEntry) HashLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FileEntry) HashBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FileEntry) MutateHash(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func FileEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func FileEntryAddPath(builder *flatbuffers.Builder, path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(path), 0)
}
func FileEntryAddSize(builder *flatbuffers.Builder, size int64) {
	builder.PrependInt64Slot(1, size, 0)
}
func FileEntryAddMtime(builder *flatbuffers.Builder, mtime int64) {
	builder.PrependInt64Slot(2, mtime, 0)
}
func FileEntryAddIsDir(builder *flatbuffers.Builder, isDir bool) {
	builder.PrependBoolSlot(3, isDir, false)
}
func FileEntryAddPermissions(builder *flatbuffers.Builder, permissions uint32) {
	builder.PrependUint32Slot(4, permissions, 0)
}
func FileEntryAddHash(builder *flatbuffers.Builder, hash flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(hash), 0)
}
func FileEntryStartHashVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func FileEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
